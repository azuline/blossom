name: typescript
on: 
  push:
    paths:
      - typescript/**
      - infra/deploy/**
      - infra/shell/**
      - .github/workflows/typescript.yaml
      - '!**/*.md'
defaults:
  run:
    working-directory: typescript/
jobs:
  check:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v15
        with:
          name: blossom
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build Nix
        run: nix build -j8 ../infra/dev-shell/#devShells.x86_64-linux.typescript
      - name: Install Dependencies
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command pnpm install
      - name: Typecheck
        if: success() || failure()
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command just typecheck
      - name: Test
        if: success() || failure()
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command just test
      - name: Lintcheck
        if: success() || failure()
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command just lintcheck
      - name: Build
        if: success() || failure()
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command just build-app
  visual:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v15
        with:
          name: blossom
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build Nix
        run: nix build -j8 ../infra/dev-shell/#devShells.x86_64-linux.typescript
      - name: Install Dependencies
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command pnpm install
      - name: Visual Tests
        if: success() || failure()
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command just test-visual
  build-ladle:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
    outputs:
      artifact_source_url: ${{ steps.upload.outputs.ladle_artifact_url }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v15
        with:
          name: blossom
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build Nix
        run: nix build -j8 ../infra/dev-shell/#devShells.x86_64-linux.typescript
      - name: Install Dependencies
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command pnpm install
      - name: Build Ladle
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command just build-stories
      - name: Create Tarball
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.typescript --command bash -c '(cd ./stories/build && tar -czvf ../../ladle.tar.gz *)'
      - name: Create release and upload tarball
        id: upload
        run: |
          commit_sha="$(git rev-parse --short HEAD)"
          timestamp="$(date +%Y-%m-%d_%H-%M-%S)"
          release_name="ladle-${timestamp}-${commit_sha}"
          token=${{ secrets.GITHUB_TOKEN }}

          # https://docs.github.com/en/rest/releases/releases#create-a-release
          # https://stackoverflow.com/questions/45240336/how-to-use-github-release-api-to-just-a-release-without-source-code
          upload_url="$(curl -s -H "Authorization: token $token" \
            -d "{\"tag_name\": \"$release_name\", \"name\":\"$release_name\",\"target_comitish\": \"$commit_sha\"}" \
            "https://api.github.com/repos/azuline/blossom/releases" | jq -r '.upload_url')"
          upload_url="${upload_url%\{*}"
          echo "Created release $release_name"

          artifact_url="$(curl -s -H "Authorization: token $token" \
            -H "Content-Type: application/gzip" \
            --data-binary @ladle.tar.gz \
            "$upload_url?name=ladle.tar.gz&label=ladle.tar.gz" | jq -r '.browser_download_url')"
          echo "Uploaded ladle.tar.gz to release"

          echo "ladle_artifact_url=${artifact_url}"
          echo "ladle_artifact_url=${artifact_url}" >> $GITHUB_OUTPUT
  deploy-ladle:
    runs-on: ubuntu-latest
    needs: build-ladle
    defaults:
      run:
        working-directory: nomad/
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      ARTIFACT_SOURCE_URL: ${{ needs.build-ladle.outputs.artifact_source_url }}
      NOMAD_ADDR: http://100.104.105.144:4646
      NOMAD_NAMESPACE: blossom
      NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v15
        with:
          name: blossom
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build Nix
        run: |
          nix build -j8 ../infra/dev-shell/#devShells.x86_64-linux.deployments
          nix develop ../infra/dev-shell/#devShells.x86_64-linux.deployments --command echo
      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
      - name: Deploy
        run: nix develop ../infra/dev-shell/#devShells.x86_64-linux.deployments --command levant deploy -log-level=debug -var "artifact_source_url=$ARTIFACT_SOURCE_URL" ladle.nomad

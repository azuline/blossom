/* Code generated by python/tools/codegen_rpc. DO NOT EDIT. */

import type { Dayjs } from "dayjs";

/**
 * All Errors
 */

export type RPCErrors = {
	AuthOrganizationNotFoundError: null;
	InputValidationError: {
		message: string;
		fields: Record<string, unknown>;
	};
	InvalidCredentialsError: null;
	ServerJSONDeserializeError: {
		message: string;
	};
	UnauthorizedError: null;
	// These are errors that the frontend RPC executor can raise.
	ClientJSONDecodeError: null;
	InternalServerError: null;
	NetworkError: null;
	RPCNotFoundError: null;
	UncaughtRPCError: null;
};

/**
 * System Errors
 */

export type RPCSystemErrors =
	| "InputValidationError"
	| "ServerJSONDeserializeError"
	| "UnauthorizedError"
	| "ClientJSONDecodeError"
	| "InternalServerError"
	| "NetworkError"
	| "RPCNotFoundError"
	| "UncaughtRPCError";

/**
 * Nested & Common
 */

export type GetPageLoadInfoOrganization = {
	id: string;
	name: string;
};

export type GetPageLoadInfoUser = {
	id: string;
	name: string;
	email: string;
};

/**
 * RPC I/O
 */

export type RPCs = {
	init: {
		in: null;
		out: {
			user: GetPageLoadInfoUser | null;
			organization: GetPageLoadInfoOrganization | null;
			available_organizations: GetPageLoadInfoOrganization[];
		};
		errors: never;
	};
	login: {
		in: {
			email: string;
			password: string;
			permanent: boolean;
			organization_id: string | null;
		};
		out: null;
		errors: "AuthOrganizationNotFoundError" | "InvalidCredentialsError";
	};
	logout: {
		in: null;
		out: null;
		errors: never;
	};
};

/**
 * RPC Methods
 */

export const RPCMethods: Record<keyof RPCs, "GET" | "POST"> = {
	init: "GET",
	login: "POST",
	logout: "POST",
};

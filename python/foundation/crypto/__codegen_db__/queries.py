# Code generated by sqlc. DO NOT EDIT.
import dataclasses
import datetime
from typing import Any, AsyncIterator
import sqlalchemy
import psycopg
from database.conn import DBConn
from database.__codegen_db__ import models
from foundation.observability.errors import NotFoundError

VAULT_SECRET_CREATE = r"""-- name: vault_secret_create \:one
INSERT INTO vaulted_secrets (organization_id, ciphertext)
VALUES (:p1, :p2)
RETURNING id, created_at, updated_at, storytime, organization_id, ciphertext
"""

async def query_vault_secret_create(conn: DBConn, *, organization_id: str, ciphertext: str) -> models.VaultedSecretModel:
    row = (await conn.execute(sqlalchemy.text(VAULT_SECRET_CREATE), {"p1": organization_id, "p2": ciphertext})).first()
    if row is None:
        raise NotFoundError(resource="vault_secret_create", key_name="organization_id", key_value=str(organization_id))
    return models.VaultedSecretModel(
        id=row[0],
        created_at=row[1],
        updated_at=row[2],
        storytime=row[3],
        organization_id=row[4],
        ciphertext=row[5],
    )

VAULT_SECRET_FETCH = r"""-- name: vault_secret_fetch \:one
SELECT id, created_at, updated_at, storytime, organization_id, ciphertext
FROM vaulted_secrets
WHERE id = :p1
"""

async def query_vault_secret_fetch(conn: DBConn, *, id: str) -> models.VaultedSecretModel:
    row = (await conn.execute(sqlalchemy.text(VAULT_SECRET_FETCH), {"p1": id})).first()
    if row is None:
        raise NotFoundError(resource="vault_secret_fetch", key_name="id", key_value=str(id))
    return models.VaultedSecretModel(
        id=row[0],
        created_at=row[1],
        updated_at=row[2],
        storytime=row[3],
        organization_id=row[4],
        ciphertext=row[5],
    )

VAULT_SECRET_DELETE = r"""-- name: vault_secret_delete \:exec
DELETE
FROM vaulted_secrets
WHERE id = :p1
"""

async def query_vault_secret_delete(conn: DBConn, *, id: str) -> None:
    await conn.execute(sqlalchemy.text(VAULT_SECRET_DELETE), {"p1": id})


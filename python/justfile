# HELP

help:  ## Describe the available commands.
    @grep -E '^[a-z][^:]+:.*?## .*$$' justfile | sed 's/^/just /' | sed 's/ \*ARGS:/:/'

# RUN PROGRAMS.

ipython *ARGS:  ## Start an interactive REPL for testing or running parts of the codebase.
    uv run -- ipython {{ARGS}}
product *ARGS:  ## Interact with the product project. Run `just product` to see the available subcommands.
    uv run -- python -m product {{ARGS}}
panopticon *ARGS:  ## Interact with the panopticon project. Run `just panopticon` to see the available subcommands.
    uv run -- python -m panopticon {{ARGS}}
pipeline *ARGS:  ## Interact with the pipeline project. Run `just pipeline` to see the available subcommands.
    DAGSTER_HOME="$(pwd)/.dagster_cache" uv run -- dagster dev
dev:  ## Run development servers for all Python projects in parallel.
    #!/usr/bin/env -S parallel --shebang --ungroup --jobs 2
    just product devserver
    just panopticon devserver

# DATABASE MANAGEMENT.

psql *ARGS:  ## Runs `psql` on the development database. Accepts `psql` arguments minus the database connection string (already supplied). Use this to run queries on the database.
    psql "postgresql://postgresql:password@localhost:40801/postgres" {{ARGS}}
migrate:  ## Runs the database migrations. Only run this command once a migration has passed all the tests.
    uv run -- python -m database migrate
new-migration MSG:  ## Create a new migration file with the correct naming structure and dependencies. ALWAYS use this tool to create a new migration.
    uv run -- yoyo new --sql --message "{{MSG}}"

# CODEGEN.

codegen-db:  ## Codegens the database queries from the `queries.sql` file using a test database. Updates `database/schema.sql` based on the migrations. Run this after every change to the migrations.
    uv run -- python -m tools.codegen-db
codegen-rpc:  ## Codegens the frontend RPC routes and types from the defined product & panopticon routes.
    uv run -- python -m tools.codegen-rpc

# DEPENDENCY MANAGEMENT.

install:  ## Install Python dependencies using `uv` according to the lockfile.
    uv sync
    echo "# THIS FILE IS FOR LEGACY COMPATIBILITY. SEE COMMENT IN SETUP.PY. DO NOT EDIT." > requirements.txt
    uv export --format requirements.txt >> requirements.txt
update *ARGS:  ## Update Python dependencies using `uv`.
    uv sync --upgrade {{ARGS}}
    echo "# THIS FILE IS FOR LEGACY COMPATIBILITY. SEE COMMENT IN SETUP.PY. DO NOT EDIT." > requirements.txt
    uv export --format requirements.txt >> requirements.txt

# CODE CHECKS.

lint *ARGS:  ## Run the configured Python linters. Pass filename(s) like `just lint file.py [file2.py]` to lint just those files.
    uv run -- pyright {{ARGS}}
    uv run -- ruff check --fix {{ARGS}}
    uv run -- ruff format {{ARGS}}
    semgrep scan --config .semgrep/ --quiet --autofix {{ARGS}}
    uv run -- tach check
test *ARGS:  ## Run the Python test suite. Pass filename(s) like `just test file.py [file2.py::test_name]` to just test those files or tests.
    uv run -- pytest {{ARGS}}
test-parallel *ARGS:  ## Run the Python test suite in parallel. Supports filename(s) parameters like in `just test`.
    uv run -- pytest -n 2 {{ARGS}}
test-snapshot *ARGS:  ## Update the cached LLM data in the Python test suite. Supports filename(s) parameters like in `just test`.
    UPDATE_SNAPSHOT=1 uv run -- pytest {{ARGS}}
dag-check:  ## Check that the Dagster configuration is valid.
    dg check defs
diff:
    git status
    git diff
    bash -c '[[ -z $(git status -s) ]] || (exit 1)'

# LLM TOOLS.

list-symbols *ARGS:  ## List all public functions, classes, methods, and literals in the codebase.
    uv run -- python -m tools.list-symbols {{ARGS}}
list-fixtures:  ## List all symbols related to the `t` testing fixture.
    uv run -- python -m tools.list-symbols | grep '^foundation.testing\|:Fixture'
check-for-migration:  ## List any migration files which have been created or modified in the current branch.
    #!/usr/bin/env bash
    if [[ "$(git branch --show-current)" = "master" ]]; then
        git diff HEAD | { grep '^python/database/migrations' || true; }
    else 
        git diff --name-only $(git merge-base HEAD master) | { grep '^python/database/migrations' || true; }
    fi
branch-changes:  ## Print a diff of all code changes made in the current branch.
    #!/usr/bin/env bash
    if [[ "$(git branch --show-current)" = "master" ]]; then
        git -c core.pager=cat diff HEAD
    else
        git -c core.pager=cat diff $(git merge-base HEAD master)
    fi

# Code generated by sqlc. DO NOT EDIT.
import dataclasses
import datetime
from typing import Any, AsyncIterator
import sqlalchemy
import psycopg
from database.conn import DBConn
from database.__codegen_db__ import models
from foundation.observability.errors import NotFoundError

@dataclasses.dataclass(slots=True)
class TestBulkInsertsData:
    name: str
    inbound_source: str

TEST_BULK_INSERTS = r"""-- name: test_bulk_inserts \:copyfrom
INSERT INTO organizations (name, inbound_source) VALUES (:p1, :p2)
"""

async def query_test_bulk_inserts(conn: DBConn, data: list[TestBulkInsertsData]) -> None:
    # Use psycopg connection for bulk insert via COPY FROM
    raw_conn = await conn.get_raw_connection()
    assert raw_conn.driver_connection
    async with raw_conn.driver_connection.cursor() as cursor:
        # Convert INSERT statement to COPY FROM format
        copy_sql = f"COPY organizations (name, inbound_source) FROM STDIN"
        async with cursor.copy(copy_sql) as copy:
            for item in data:
                await copy.write_row((item.name, item.inbound_source))


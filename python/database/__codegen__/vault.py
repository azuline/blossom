# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: vault.sql
from typing import Any, Optional

import psycopg

from database.__codegen__ import models


VAULT_SECRET_CREATE = """-- name: vault_secret_create \\:one
INSERT INTO vaulted_secrets (organization_id, ciphertext)
VALUES (%s, %s)
RETURNING id, created_at, updated_at, storytime, organization_id, ciphertext
"""


VAULT_SECRET_DELETE = """-- name: vault_secret_delete \\:exec
DELETE
FROM vaulted_secrets
WHERE id = %s
"""


VAULT_SECRET_FETCH = """-- name: vault_secret_fetch \\:one
SELECT id, created_at, updated_at, storytime, organization_id, ciphertext
FROM vaulted_secrets
WHERE id = %s
"""


class AsyncQuerier:
    def __init__(self, conn: psycopg.AsyncConnection[Any]):
        self._conn = conn

    async def vault_secret_create(self, *, organization_id: str, ciphertext: str) -> Optional[models.VaultedSecret]:
        row = await (await self._conn.execute(VAULT_SECRET_CREATE, (organization_id, ciphertext))).fetchone()
        if row is None:
            return None
        return models.VaultedSecret(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            organization_id=row[4],
            ciphertext=row[5],
        )

    async def vault_secret_delete(self, *, id: str) -> None:
        await self._conn.execute(VAULT_SECRET_DELETE, (id, ))

    async def vault_secret_fetch(self, *, id: str) -> Optional[models.VaultedSecret]:
        row = await (await self._conn.execute(VAULT_SECRET_FETCH, (id, ))).fetchone()
        if row is None:
            return None
        return models.VaultedSecret(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            organization_id=row[4],
            ciphertext=row[5],
        )

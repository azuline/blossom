# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: testing.sql
import datetime
from typing import Any, Optional

import psycopg

from database.__codegen__ import models


TEST_ORGANIZATION_CREATE = """-- name: test_organization_create \\:one
INSERT INTO organizations (name, inbound_source)
VALUES (%s, %s)
RETURNING id, created_at, updated_at, storytime, name, inbound_source
"""


TEST_ORGANIZATION_USER_CREATE = """-- name: test_organization_user_create \\:one
INSERT INTO organizations_users (user_id, organization_id)
VALUES (%s, %s)
RETURNING id, created_at, updated_at, storytime, user_id, organization_id, removed_at, removed_by_user
"""


TEST_SESSION_CREATE = """-- name: test_session_create \\:one
INSERT INTO sessions (user_id, organization_id, expired_at, last_seen_at)
VALUES (%s, %s, %s, %s)
RETURNING id, created_at, updated_at, storytime, user_id, organization_id, last_seen_at, expired_at
"""


TEST_USER_CREATE = """-- name: test_user_create \\:one

INSERT INTO users (name, email, password_hash, signup_step, is_enabled)
VALUES (%s, %s, %s, %s, %s)
RETURNING id, created_at, updated_at, storytime, name, email, password_hash, signup_step, is_enabled, last_visited_at
"""


class AsyncQuerier:
    def __init__(self, conn: psycopg.AsyncConnection[Any]):
        self._conn = conn

    async def test_organization_create(self, *, name: str, inbound_source: str) -> Optional[models.Organization]:
        row = await (await self._conn.execute(TEST_ORGANIZATION_CREATE, (name, inbound_source))).fetchone()
        if row is None:
            return None
        return models.Organization(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def test_organization_user_create(self, *, user_id: str, organization_id: str) -> Optional[models.OrganizationsUser]:
        row = await (await self._conn.execute(TEST_ORGANIZATION_USER_CREATE, (user_id, organization_id))).fetchone()
        if row is None:
            return None
        return models.OrganizationsUser(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            user_id=row[4],
            organization_id=row[5],
            removed_at=row[6],
            removed_by_user=row[7],
        )

    async def test_session_create(self, *, user_id: str, organization_id: Optional[str], expired_at: Optional[datetime.datetime], last_seen_at: datetime.datetime) -> Optional[models.Session]:
        row = await (await self._conn.execute(TEST_SESSION_CREATE, (user_id, organization_id, expired_at, last_seen_at))).fetchone()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            user_id=row[4],
            organization_id=row[5],
            last_seen_at=row[6],
            expired_at=row[7],
        )

    async def test_user_create(self, *, name: str, email: str, password_hash: Optional[str], signup_step: str, is_enabled: bool) -> Optional[models.User]:
        row = await (await self._conn.execute(TEST_USER_CREATE, (name, email, password_hash, signup_step, is_enabled))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: users.sql
from typing import Any, Optional

import psycopg

from database.__codegen__ import models


USER_CREATE = """-- name: user_create \\:one
INSERT INTO users (name, email, password_hash, signup_step)
VALUES (%s, %s, %s, %s)
RETURNING id, created_at, updated_at, storytime, name, email, password_hash, signup_step, is_enabled, last_visited_at
"""


USER_FETCH = """-- name: user_fetch \\:one
SELECT id, created_at, updated_at, storytime, name, email, password_hash, signup_step, is_enabled, last_visited_at
FROM users
WHERE id = %s
"""


class AsyncQuerier:
    def __init__(self, conn: psycopg.AsyncConnection[Any]):
        self._conn = conn

    async def user_create(self, *, name: str, email: str, password_hash: Optional[str], signup_step: str) -> Optional[models.User]:
        row = await (await self._conn.execute(USER_CREATE, (name, email, password_hash, signup_step))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def user_fetch(self, *, id: str) -> Optional[models.User]:
        row = await (await self._conn.execute(USER_FETCH, (id, ))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: organizations.sql
from typing import Any, AsyncIterator, Optional

import psycopg

from database.__codegen__ import models


ORGANIZATION_ADD_USER = """-- name: organization_add_user \\:one
INSERT INTO organizations_users (organization_id, user_id)
VALUES (%s, %s)
RETURNING id, created_at, updated_at, storytime, user_id, organization_id, removed_at, removed_by_user
"""


ORGANIZATION_CREATE = """-- name: organization_create \\:one
INSERT INTO organizations (name, inbound_source)
VALUES (%s, %s)
RETURNING id, created_at, updated_at, storytime, name, inbound_source
"""


ORGANIZATION_FETCH = """-- name: organization_fetch \\:one
SELECT id, created_at, updated_at, storytime, name, inbound_source
FROM organizations
WHERE id = %s
"""


ORGANIZATION_FETCH_ALL = """-- name: organization_fetch_all \\:many
SELECT t.id, t.created_at, t.updated_at, t.storytime, t.name, t.inbound_source
FROM organizations t
JOIN organizations_users tu ON tu.organization_id = t.id
WHERE tu.user_id = %s
"""


class AsyncQuerier:
    def __init__(self, conn: psycopg.AsyncConnection[Any]):
        self._conn = conn

    async def organization_add_user(self, *, organization_id: str, user_id: str) -> Optional[models.OrganizationsUser]:
        row = await (await self._conn.execute(ORGANIZATION_ADD_USER, (organization_id, user_id))).fetchone()
        if row is None:
            return None
        return models.OrganizationsUser(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            user_id=row[4],
            organization_id=row[5],
            removed_at=row[6],
            removed_by_user=row[7],
        )

    async def organization_create(self, *, name: str, inbound_source: str) -> Optional[models.Organization]:
        row = await (await self._conn.execute(ORGANIZATION_CREATE, (name, inbound_source))).fetchone()
        if row is None:
            return None
        return models.Organization(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def organization_fetch(self, *, id: str) -> Optional[models.Organization]:
        row = await (await self._conn.execute(ORGANIZATION_FETCH, (id, ))).fetchone()
        if row is None:
            return None
        return models.Organization(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def organization_fetch_all(self, *, user_id: str) -> AsyncIterator[models.Organization]:
        cursor = await self._conn.execute(ORGANIZATION_FETCH_ALL, (user_id, ))
        async for row in cursor:
            yield models.Organization(
                id=row[0],
                created_at=row[1],
                updated_at=row[2],
                storytime=row[3],
                name=row[4],
                inbound_source=row[5],
            )

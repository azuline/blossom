# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: auth.sql
from typing import Any, Optional

import psycopg

from database.__codegen__ import models


AUTHN_LINKED_ORGANIZATION_FETCH = """-- name: authn_linked_organization_fetch \\:one
SELECT t.id, t.created_at, t.updated_at, t.storytime, t.name, t.inbound_source
FROM organizations t
JOIN organizations_users tu ON tu.organization_id = t.id
WHERE tu.user_id = %s AND t.id = %s
"""


AUTHN_MOST_RECENTLY_ACCESSED_ORGANIZATION_FETCH = """-- name: authn_most_recently_accessed_organization_fetch \\:one
SELECT t.id, t.created_at, t.updated_at, t.storytime, t.name, t.inbound_source
FROM organizations t
JOIN organizations_users tu ON tu.organization_id = t.id
LEFT JOIN sessions s ON s.organization_id = t.id AND s.user_id = tu.user_id
WHERE tu.user_id = %s
ORDER BY s.last_seen_at DESC NULLS LAST, t.id ASC
LIMIT 1
"""


AUTHN_SESSION_CREATE = """-- name: authn_session_create \\:one
INSERT INTO sessions (user_id, organization_id)
VALUES (%s, %s)
RETURNING id, created_at, updated_at, storytime, user_id, organization_id, last_seen_at, expired_at
"""


AUTHN_SESSION_EXPIRE = """-- name: authn_session_expire \\:exec
UPDATE sessions
SET expired_at = NOW()
WHERE id = %s
"""


AUTHN_SESSION_FETCH_BY_USER = """-- name: authn_session_fetch_by_user \\:one
SELECT id, created_at, updated_at, storytime, user_id, organization_id, last_seen_at, expired_at
FROM sessions
WHERE user_id = %s
ORDER BY last_seen_at DESC
LIMIT 1
"""


AUTHN_USER_FETCH_BY_EMAIL = """-- name: authn_user_fetch_by_email \\:one
SELECT id, created_at, updated_at, storytime, name, email, password_hash, signup_step, is_enabled, last_visited_at
FROM users
WHERE email = %s
"""


RPC_UNEXPIRED_SESSION_FETCH = """-- name: rpc_unexpired_session_fetch \\:one
SELECT id, created_at, updated_at, storytime, user_id, organization_id, last_seen_at, expired_at
FROM sessions
WHERE id = %s
AND expired_at IS NULL
AND last_seen_at > NOW() - '14 days'::INTERVAL
"""


class AsyncQuerier:
    def __init__(self, conn: psycopg.AsyncConnection[Any]):
        self._conn = conn

    async def authn_linked_organization_fetch(self, *, user_id: str, id: str) -> Optional[models.Organization]:
        row = await (await self._conn.execute(AUTHN_LINKED_ORGANIZATION_FETCH, (user_id, id))).fetchone()
        if row is None:
            return None
        return models.Organization(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def authn_most_recently_accessed_organization_fetch(self, *, user_id: str) -> Optional[models.Organization]:
        row = await (await self._conn.execute(AUTHN_MOST_RECENTLY_ACCESSED_ORGANIZATION_FETCH, (user_id, ))).fetchone()
        if row is None:
            return None
        return models.Organization(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def authn_session_create(self, *, user_id: str, organization_id: Optional[str]) -> Optional[models.Session]:
        row = await (await self._conn.execute(AUTHN_SESSION_CREATE, (user_id, organization_id))).fetchone()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            user_id=row[4],
            organization_id=row[5],
            last_seen_at=row[6],
            expired_at=row[7],
        )

    async def authn_session_expire(self, *, id: str) -> None:
        await self._conn.execute(AUTHN_SESSION_EXPIRE, (id, ))

    async def authn_session_fetch_by_user(self, *, user_id: str) -> Optional[models.Session]:
        row = await (await self._conn.execute(AUTHN_SESSION_FETCH_BY_USER, (user_id, ))).fetchone()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            user_id=row[4],
            organization_id=row[5],
            last_seen_at=row[6],
            expired_at=row[7],
        )

    async def authn_user_fetch_by_email(self, *, email: str) -> Optional[models.User]:
        row = await (await self._conn.execute(AUTHN_USER_FETCH_BY_EMAIL, (email, ))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def rpc_unexpired_session_fetch(self, *, id: str) -> Optional[models.Session]:
        row = await (await self._conn.execute(RPC_UNEXPIRED_SESSION_FETCH, (id, ))).fetchone()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            user_id=row[4],
            organization_id=row[5],
            last_seen_at=row[6],
            expired_at=row[7],
        )

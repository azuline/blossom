# Code generated by sqlc. DO NOT EDIT.
import datetime
from typing import Any, AsyncIterator
import sqlalchemy
import psycopg
from database.conn import DBConn
from database.__codegen_db__ import models
from foundation.observability.errors import NotFoundError

ORGANIZATION_FETCH = r"""-- name: organization_fetch \:one
SELECT id, created_at, updated_at, storytime, name, inbound_source
FROM organizations
WHERE id = :p1
"""

async def query_organization_fetch(conn: DBConn, *, id: str) -> models.OrganizationModel:
    row = (await conn.execute(sqlalchemy.text(ORGANIZATION_FETCH), {"p1": id})).first()
    if row is None:
        raise NotFoundError(resource="organization", key_name="id", key_value=str(id))
    return models.OrganizationModel(
        id=row[0],
        created_at=row[1],
        updated_at=row[2],
        storytime=row[3],
        name=row[4],
        inbound_source=row[5],
    )

ORGANIZATION_CREATE = r"""-- name: organization_create \:one
INSERT INTO organizations (name, inbound_source)
VALUES (:p1, :p2)
RETURNING id, created_at, updated_at, storytime, name, inbound_source
"""

async def query_organization_create(conn: DBConn, *, name: str, inbound_source: str) -> models.OrganizationModel:
    row = (await conn.execute(sqlalchemy.text(ORGANIZATION_CREATE), {"p1": name, "p2": inbound_source})).first()
    if row is None:
        raise NotFoundError(resource="organization", key_name="name", key_value=str(name))
    return models.OrganizationModel(
        id=row[0],
        created_at=row[1],
        updated_at=row[2],
        storytime=row[3],
        name=row[4],
        inbound_source=row[5],
    )

ORGANIZATION_USER_ADD = r"""-- name: organization_user_add \:one
INSERT INTO organizations_users (organization_id, user_id)
VALUES (:p1, :p2)
RETURNING id, created_at, updated_at, storytime, user_id, organization_id, removed_at, removed_by_user
"""

async def query_organization_user_add(conn: DBConn, *, organization_id: str, user_id: str) -> models.OrganizationsUserModel:
    row = (await conn.execute(sqlalchemy.text(ORGANIZATION_USER_ADD), {"p1": organization_id, "p2": user_id})).first()
    if row is None:
        raise NotFoundError(resource="organizationsuser", key_name="organization_id", key_value=str(organization_id))
    return models.OrganizationsUserModel(
        id=row[0],
        created_at=row[1],
        updated_at=row[2],
        storytime=row[3],
        user_id=row[4],
        organization_id=row[5],
        removed_at=row[6],
        removed_by_user=row[7],
    )

ORGANIZATION_FETCH_ALL = r"""-- name: organization_fetch_all \:many
SELECT t.id, t.created_at, t.updated_at, t.storytime, t.name, t.inbound_source
FROM organizations t
JOIN organizations_users tu ON tu.organization_id = t.id
WHERE tu.user_id = :p1
"""

async def query_organization_fetch_all(conn: DBConn, *, user_id: str) -> AsyncIterator[models.OrganizationModel]:
    result = await conn.execute(sqlalchemy.text(ORGANIZATION_FETCH_ALL), {"p1": user_id})
    for row in result:
        yield models.OrganizationModel(
            id=row[0],
            created_at=row[1],
            updated_at=row[2],
            storytime=row[3],
            name=row[4],
            inbound_source=row[5],
        )


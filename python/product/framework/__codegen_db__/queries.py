# Code generated by sqlc. DO NOT EDIT.
import datetime
from typing import Any, AsyncIterator
import sqlalchemy
from database.conn import DBConn
from database.__codegen_db__ import models
from foundation.observability.errors import NotFoundError

RPC_UNEXPIRED_SESSION_FETCH = r"""-- name: rpc_unexpired_session_fetch \:one
SELECT id, created_at, updated_at, storytime, user_id, organization_id, last_seen_at, expired_at
FROM sessions
WHERE id = :p1
AND expired_at IS NULL
AND last_seen_at > NOW() - '14 days'\:\:INTERVAL
"""

async def query_rpc_unexpired_session_fetch(conn: DBConn, *, id: str) -> models.SessionModel:
    row = (await conn.execute(sqlalchemy.text(RPC_UNEXPIRED_SESSION_FETCH), {"p1": id})).first()
    if row is None:
        raise NotFoundError(resource="session", key_name="id", key_value=str(id))
    return models.SessionModel(
        id=row[0],
        created_at=row[1],
        updated_at=row[2],
        storytime=row[3],
        user_id=row[4],
        organization_id=row[5],
        last_seen_at=row[6],
        expired_at=row[7],
    )


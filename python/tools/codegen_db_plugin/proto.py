# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: codegen.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class File(betterproto.Message):
    name: str = betterproto.string_field(1)
    contents: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class Settings(betterproto.Message):
    version: str = betterproto.string_field(1)
    engine: str = betterproto.string_field(2)
    schema: List[str] = betterproto.string_field(3)
    queries: List[str] = betterproto.string_field(4)
    codegen: "Codegen" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class Codegen(betterproto.Message):
    out: str = betterproto.string_field(1)
    plugin: str = betterproto.string_field(2)
    options: bytes = betterproto.bytes_field(3)
    env: List[str] = betterproto.string_field(4)
    process: "CodegenProcess" = betterproto.message_field(5)
    wasm: "CodegenWasm" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CodegenProcess(betterproto.Message):
    cmd: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CodegenWasm(betterproto.Message):
    url: str = betterproto.string_field(1)
    sha256: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Catalog(betterproto.Message):
    comment: str = betterproto.string_field(1)
    default_schema: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    schemas: List["Schema"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class Schema(betterproto.Message):
    comment: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    tables: List["Table"] = betterproto.message_field(3)
    enums: List["Enum"] = betterproto.message_field(4)
    composite_types: List["CompositeType"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CompositeType(betterproto.Message):
    name: str = betterproto.string_field(1)
    comment: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Enum(betterproto.Message):
    name: str = betterproto.string_field(1)
    vals: List[str] = betterproto.string_field(2)
    comment: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Table(betterproto.Message):
    rel: "Identifier" = betterproto.message_field(1)
    columns: List["Column"] = betterproto.message_field(2)
    comment: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Identifier(betterproto.Message):
    catalog: str = betterproto.string_field(1)
    schema: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Column(betterproto.Message):
    name: str = betterproto.string_field(1)
    not_null: bool = betterproto.bool_field(3)
    is_array: bool = betterproto.bool_field(4)
    comment: str = betterproto.string_field(5)
    length: int = betterproto.int32_field(6)
    is_named_param: bool = betterproto.bool_field(7)
    is_func_call: bool = betterproto.bool_field(8)
    scope: str = betterproto.string_field(9)
    """XXX: Figure out what PostgreSQL calls `foo.id`"""

    table: "Identifier" = betterproto.message_field(10)
    table_alias: str = betterproto.string_field(11)
    type: "Identifier" = betterproto.message_field(12)
    is_sqlc_slice: bool = betterproto.bool_field(13)
    embed_table: "Identifier" = betterproto.message_field(14)
    original_name: str = betterproto.string_field(15)
    unsigned: bool = betterproto.bool_field(16)
    array_dims: int = betterproto.int32_field(17)


@dataclass(eq=False, repr=False)
class Query(betterproto.Message):
    text: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    cmd: str = betterproto.string_field(3)
    columns: List["Column"] = betterproto.message_field(4)
    params: List["Parameter"] = betterproto.message_field(5)
    comments: List[str] = betterproto.string_field(6)
    filename: str = betterproto.string_field(7)
    insert_into_table: "Identifier" = betterproto.message_field(8)
    filepath: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class Parameter(betterproto.Message):
    number: int = betterproto.int32_field(1)
    column: "Column" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GenerateRequest(betterproto.Message):
    settings: "Settings" = betterproto.message_field(1)
    catalog: "Catalog" = betterproto.message_field(2)
    queries: List["Query"] = betterproto.message_field(3)
    sqlc_version: str = betterproto.string_field(4)
    plugin_options: bytes = betterproto.bytes_field(5)
    global_options: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class GenerateResponse(betterproto.Message):
    files: List["File"] = betterproto.message_field(1)


class CodegenServiceStub(betterproto.ServiceStub):
    async def generate(
        self,
        generate_request: "GenerateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GenerateResponse":
        return await self._unary_unary(
            "/plugin.CodegenService/Generate",
            generate_request,
            GenerateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CodegenServiceBase(ServiceBase):

    async def generate(self, generate_request: "GenerateRequest") -> "GenerateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_generate(
        self, stream: "grpclib.server.Stream[GenerateRequest, GenerateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/plugin.CodegenService/Generate": grpclib.const.Handler(
                self.__rpc_generate,
                grpclib.const.Cardinality.UNARY_UNARY,
                GenerateRequest,
                GenerateResponse,
            ),
        }

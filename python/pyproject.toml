[project]
name = "blossom"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiohttp>=3.12.12",
    "aiorwlock>=1.5.0",
    "asyncpg>=0.30.0",
    "cachetools>=5.5.2",
    "click>=8.1.0",
    "colorama>=0.4.6",
    "coolname>=2.2.0",
    "dacite>=1.9.2",
    "dagster>=1.10.14",
    "dagster-webserver>=1.10.14",
    "datadog>=0.52.0",
    "ddtrace>=3.10.2",
    "filelock>=3.18.0",
    "google-api-python-client>=2.154.0",
    "google-auth>=2.38.0",
    "hypercorn[uvloop]>=0.17.3",
    "jinja2>=3.1.6",
    "openai>=1.86.0",
    "psycopg[binary,pool]>=3.2.9",
    "pycryptodome>=3.23.0",
    "pydantic>=2.11.7",
    "pytest-env>=1.1.5",
    "python-dotenv>=1.1.0",
    "pyyaml>=6.0.0",
    "quart>=0.20.0",
    "sentry-sdk[quart]>=2.22.0",
    "slack-sdk>=3.35.0",
    "sqlalchemy[asyncio]>=2.0.41",
    "structlog>=25.4.0",
    "structlog-sentry>=2.1.0",
    "tsidpy>=1.1.5",
    "unidecode>=1.4.0",
    "werkzeug>=3.1.3",
    "yoyo-migrations>=9.0.0",
]

[dependency-groups]
dev = [
    "betterproto[compiler]==2.0.0b7",
    "dagster-dg-cli>=1.11.1",
    "grpcio-tools>=1.71.2",
    "ipython>=9.4.0",
    "pyright>=1.1.402",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.7.0",
    "syrupy>=4.9.1",
    "tach>=0.29.0",
]

[tool.uv]
python-preference = "only-system"

[tool.dagster]
module_name = "pipeline.definitions"
code_location_name = "pipeline"
[tool.dg]
directory_type = "project"
[tool.dg.project]
root_module = "pipeline"
defs_module = "pipeline"
code_location_target_module = "pipeline.definitions"

[tool.ruff]
line-length = 180
exclude = [".venv", ".*_cache", ".tach", "**/__codegen__", "claude", "./tools/sqlc_gen_python/proto.py"]
target-version = "py313"
preview = true

[tool.ruff.lint]
# https://beta.ruff.rs/docs/configuration/
select = [
    "E",    # pycodestyle error
    "W",    # pycodestyle warning
    "F",    # pyflakes
    "I",    # isort
    "U",    # pyupgrade
    "B",    # bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "RSE",  # flake8-raise
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "RUF",  # ruff
    "INP",  # flake8-no-pep420
    "T20",  # flake8-print
    "PTH",  # flake8-use-pathlib
    # Individual rules.
    "PLC0415",  # https://docs.astral.sh/ruff/rules/import-outside-top-level/
]
ignore = [
    # Line too long; this happens with long strings etc. If it can't be autoformatted, nbd.
    "E501",
    # Undefined variables; handled by Pyright. Avoid doubling up.
    "F821",
    # ambiguous-unicode-character-string, many false positives.
    "RUF001",
    # Require async feature use within async functions; breaks on async route framework.
    "RUF029",
    # if-else-block-instead-of-if-exp, overcomplicated code.
    "SIM108",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"logging.getLogger".msg = "Use the foundation.logs:get_logger facade instead."
"datetime.datetime.now".msg = "Use the foundation.time:CLOCK.now method instead."
"dagster.asset".msg = "Use the foundation.dag:asset facade instead."
"sentry_sdk.capture_exception".msg = "Use the foundation.errors:report_error facade instead."
"structlog.get_logger".msg = "Use the foundation.logs:get_logger facade instead."

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
# Environment options.
exclude = [".venv", "tools/sqlc_gen_python/proto.py"]
norecursedirs = [".venv", ".*_cache", ".tach", "__pycache__", ".direnv"]
venvPath = "."
venv = ".venv"
pythonPlatform = "Linux"
executionEnvironments = [{ root = "." }]
# Type evaluation settings.
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
deprecateTypingAliases = true
enableReachabilityAnalysis = true
# Type check diagnostics settings.
typeCheckingMode = "standard"
reportMissingModuleSource = false
# Type check rule overrides.
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedBaseClass = "warning"
reportUntypedNamedTuple = "warning"
reportTypeCommentUsage = "error"
reportConstantRedefinition = "error"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnusedCoroutine = "error"
reportPrivateImportUsage = "none"

[tool.pytest.ini_options]
norecursedirs = [".venv", ".*_cache", ".tach", "__pycache__", ".direnv"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
# Logs are emitted to stderr in a formatted way. When pytest captures logs,
# they emit as hard-to-read JSON.
addopts = "-p no:logging --cov=. --cov-branch --cov-report="
timeout = 15
markers = [
    "live: marks tests that require live services (deselect with '-m \"not live\"')",
]
[tool.pytest_env]
DD_TRACE_ENABLED = "false"

[tool.coverage.run]
omit = ["*/__snapshots__/*", "*/__llmshots__/*"]
[tool.coverage.report]
omit = ["*/__snapshots__/*", "*/__llmshots__/*", ".venv/*", ".direnv/*"]

{
  "compilerOptions": {
    // Target esnext; other build tools will handle downleveling syntax.
    "target": "esnext",
    // The default set of type definitions.
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    // Don't allow JS imports; all code must be TS.
    "allowJs": false,
    // Skip type checking of .d.ts declaration files.
    "skipLibCheck": true,
    // Strict mode!
    "strict": true,
    // Force case-sensitivity, even on case-insensitive filesystems.
    "forceConsistentCasingInFileNames": true,
    // Use ESNext's module system.
    "module": "ESNext",
    // Resolve modules similarly to how bundlers resolve modules.
    "moduleResolution": "bundler",
    // Allow importing .JSON files.
    "resolveJsonModule": true,
    // https://www.typescriptlang.org/tsconfig#composite.
    "composite": true,
    // Generate .d.ts files.
    "declaration": true,
    // Generate a sourcemap for .d.ts files that link back to the source.
    "declarationMap": true,
    // Generate source maps for jump to definition.
    "sourceMap": true,
    // Transpile JSX to `_jsx` calls.
    "jsx": "react-jsx",
    // Global typings across all packages.
    "types": ["@configs/typescript"],
    // Magical stuff, IDK.
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "isolatedModules": true
  }
}
